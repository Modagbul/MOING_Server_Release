plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.14'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.moing'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExtensions
	querydsl.extendsFrom compileClasspath
}

repositories {
	mavenCentral()
	google()
}


bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework:spring-context:5.3.15'

	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.2.2'
	implementation 'org.springframework:spring-context:5.3.15'

	implementation 'com.google.code.gson:gson:2.8.7'

	// Push Alarm
	implementation 'com.google.firebase:firebase-admin:8.2.0'
	implementation 'com.google.firebase:firebase-messaging:23.0.0'

	// RestDocs
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// Qeurydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0'
	implementation 'com.querydsl:querydsl-apt:5.0.0'

	// Jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// WebClient
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Feign
	implementation 'io.github.openfeign:feign-httpclient:12.1'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.4'

	// Throttling
	implementation 'com.bucket4j:bucket4j-core:8.1.1'
	implementation 'com.bucket4j:bucket4j-jcache:8.1.1'
	implementation 'javax.cache:cache-api:1.1.1'
	implementation 'org.redisson:redisson:3.19.0'

	// S3
	implementation("org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE")
	implementation platform('software.amazon.awssdk:bom:2.17.230')
	implementation 'software.amazon.awssdk:s3'

	//slack
	implementation 'com.slack.api:slack-api-client:1.30.0'

	//json
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'

}

tasks.named('test') {
	useJUnitPlatform()
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
}

asciidoctor {
	dependsOn test
	configurations 'asciidoctorExtensions'
	inputs.dir snippetsDir

	// 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
	// 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
	baseDirFollowsSourceFile()
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}
build {
	dependsOn copyDocument
}


def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}